#!/usr/bin/env bash

# Wov Test Runner


if [ "${_tr_is_loaded}" != "1" ]; then

  _tr_fold=`tput cols`
  let _tr_fold2=$_tr_fold-11
  let _tr_fold4=$_tr_fold-14

  _tr_startpath=$(realpath "`dirname $0`")

  _tr_is_loaded="1"
    # --- ensure only loaded once

  _tr_exit_on_fail=
    # --- when true, exists if a test fails

  _tr_dirs=
    # --- stack of directories it traverses

  _tr_results=
    # --- array of test results

  _tr_testson=
    # ---

  _tr_output=
    # ---

  _tr_doctest=
    # --- documentation for the next test run

  _tr_sections=
    # --- hierachy of testing sections




  # Initialization
  # ---------------------------------------------------------------------
  function tr_reset_results()
  {
    _tr_results=( 0 0 0 0 0 )    # failed passed skipped subtestfailed total
  }
  function tr_init()
  {
    tr_reset_results
    tr_onfailexit
    _tr_testson=1
    _tr_output=1
    _tr_dirs=()
    _tr_doctest=
    _tr_sections=()
  }

  # Configuration
  # ---------------------------------------------------------------------
  function tr_onfailexit()
  {
    _tr_exit_on_fail=1
  }
  function tr_onfailcontinue()
  {
    _tr_exit_on_fail=0
  }
  function tr_tests_on()
  {
    echo ""
    echo "TESTS ON"
    _tr_testson=1
  }
  function tr_tests_off()
  {
    echo ""
    echo "TESTS OFF"
    _tr_testson=0
  }
  function tr_vverbose()
  {
    _tr_output=2
    echo ""
    echo "OUTPUT : VERYVERBOSE"
  }
  function tr_verbose()
  {
    if [ ${_tr_output} -ge 2 ]; then printf "\nOUTPUT : VERBOSE\n"; fi
    _tr_output=1
  }
  function tr_quiet()
  {
    if [ ${_tr_output} -ge 2 ]; then printf "\nOUTPUT : QUIET\n"; fi
    _tr_output=0
  }


  # Output Headings
  # ---------------------------------------------------------------------

  # $1 - if set, this is a closing section
  function _tr_printsection()
  {
    if [ ${#_tr_sections[@]} -ne 0 ]; then
      for s in "${_tr_sections[@]}"; do
        printf " > $s"
      done
      if [ "$1" != "" ]; then printf " / $1"; fi
      printf "\n"
    fi
  }
  function tr_section
  {
    local a=${1:0:1}
    local s=
    printf "\nSECTION:"
    if [ "$a" == '/' ]; then
      s="${1:1}"
      tailsection=${_tr_sections[-1]}
      if [ "${s}" != "${tailsection}" ]; then
        echo "WARNING (tr_section in $0:$BASH_LINENO): unmatched section '${s}' vs '${tailsection}'"
      fi
      unset '_tr_sections[${#_tr_sections[@]}-1]'
      if [ ${_tr_output} -ge 2 ]; then _tr_printsection $tailsection ; fi
    else
      s="${1}"
      _tr_sections+=( "$1" )
      _tr_printsection
    fi

  }
  function tr_comment()
  {
    echo ""
    echo "COMMENT: '$1" | fold -w ${_tr_fold4} -s | gsed -e '2,$s/^/             \x27/'
  }

  function tr_h1()
  {
    echo ""
    echo ""
    echo "*********************************************************************"
    echo "${@}"
    _tr_printsection
    echo "*********************************************************************"
    echo "*********************************************************************"
  }
  function tr_h2()
  {
    echo ""
    echo "====================================================================="
    echo "${@}"
    _tr_printsection
    echo "====================================================================="
  }
  function tr_h3()
  {
    echo ""
    echo "---------------------------------------------------------------------" 
    echo "${@}"
    _tr_printsection
    echo "---------------------------------------------------------------------" 
  }
  function tr_h4()
  {
    echo ""
    echo "${@}"
    _tr_printsection
    echo "---------------------------------------------------------------------" 
  }



  # Files and Directories
  # ---------------------------------------------------------------------
  function tr_runfile()
  {
#    echo `dirname $0`
#    echo ${1}
##    echo `pwd`
#    echo `realpath ./tests/1.sh`
#    local p="`pwd`/`dirname $0`/${1}"
    local p=$(realpath "`dirname $0`/${1}")
    local spl=${#_tr_startpath}+1
    local pp="${p:spl}"
    #echo "RUN FILE '${1}' : '${p}' ${pp}"
    echo ""
    echo "RUN FILE '${pp}' ('${p}')"
    . "${p}"
    # TODO: should check dirs stack as it could get screwed up here
  }
  function tr_dir()
  {
    _tr_dirs+=( `pwd` )
    cd $1
    printf "\nDIR    : 'cd ${1}' to `pwd`\n"
  }
  function tr_popdir()
  {
    d="${_tr_dirs[-1]}"
    unset '_tr_dirs[${#_tr_dirs[@]}-1]'
    cd $d
    printf "\nPOPDIR : 'to `pwd`'\n"
  }



  # $1 name
  # $2 command
  # $3 expected retval
  # $4 expected result
#  function tr_test()
#  {
  # 1 - name
  # 2 - test 
  # 3 - retval
  # 4 - num vars returned
  # * - remaining vars
#    tr_testarray "$1" "$2" "$3" 1 "$4"
#  }

#  function tr_test_old()
#  {
#    echo "TEST   : '${1}'"
#    local Re=
#    local R=`${2}`; Re=$?
#    #  echo "R  ${R}"
#    #  echo "Re ${Re}"
#
#    if [ "${4:0:1}" == "[" ]; then
#      # echo "R ${R}"
#      # echo "eval '${4}'"
#      local result=${R}
#      local RR=`eval $4` ; RRe=$?
#      # echo "RR '${RR}' ${RRe}"
#      if [ ${RRe} -eq ${3} ]; then
#        echo "  PASSED"
#        let "_tr_results[1]++"
#        let "_tr_results[4]++"
#      else
#        echo "  FAILED '${4}' returns '${RRe}' not '${3}'"
#        let "_tr_results[0]++"
#        let "_tr_results[3]++"
#        if [ ${_tr_exit_on_fail} == 1 ]; then tr_results; exit 1; fi
#      fi
#    else
#
#      if [ "${R}" != "${4}" ] || [ "${Re}" -ne ${3} ]; then
#        echo "  FAILED '${R}' '${Re}' is not '${4}' '${3}'"
#        let "_tr_results[0]++"
#        let "_tr_results[3]++"
#        if [ ${_tr_exit_on_fail} == 1 ]; then tr_results; exit 1; fi
#      else
#        echo "  PASSED"
#        let "_tr_results[1]++"
#        let "_tr_results[4]++"
#      fi
#    fi
#  }

  # 1 - name
  # 2 - test 
  # 3 - retval
  # 4 - num vars returned
  # * - remaining vars
  function tr_test()
  {
    if [ ${_tr_testson} == 0 ]; then tr_test_skip $1 ; return 0; fi

    echo ""
    echo "TEST   : '${1}' (line ${BASH_LINENO})"
    if [ ${_tr_output} -ge 2 ] && [ "${_tr_doctest}" != "" ]; then printf "  DOC    : '$_tr_doctest'\n"; fi
    _tr_doctest=

    # echo "--EVAL $2"
    if [ ${_tr_output} -ge 2 ]; then
#        printf "  CMD    : '$2'\n"
        cat <<EOF | fold -w ${_tr_fold2} -s | sed 's/^/  /'
CMD    : '$2'
EOF
    fi
    local E=()
    local EXPECTED=()
    local Re=
    local R_=
    local R=

    # R_ is raw output and has newlines
    # R is split on newlinees does not, but R maintains # of args
    R_="$(eval ${2})"; Re=$?
    local R=( ${R_[@]} )
#    echo "R_: ${#R_[@]} ${#R_[*]} '${R_[@]}'"
#    echo "R : ${#R[@]} ${#R[*]} '${R[@]}'"

    # make sure it at least has some output of ''
    if [ ${#R[@]} -eq 0 ]; then R=( '' ); fi

    local retval=0
#    echo "R  '${R[@]}' '${#R[@]}' "
#    echo "Re ${Re}"

    # test retval
    if [ "${Re}" != "${3}" ]; then
      E+=( "F CHECK: return value '${Re}' is not '${3}'" )
      #echo "    F CHECK: return value '${Re}' is not '${3}'"
      #    let "_tr_results[3]++" # not counting return values
      retval=1
    fi
    if [ "${#R[@]}" != "${4}" ]; then
      E+=( "F CHECK: returned '${#R[@]}' values but expecting '${4}'. '${R_[@]}'" )
      retval=1
    fi

    # test each
    # local l="${#R[@]}"
    local l=${4}
    l="$((${l}-1))"
#    echo "l $l"
    if [ $l -lt 0 ]; then
      >&2 echo "ERROR: test case has bad number of passed in args '$4'. Needs at least 1."
      exit 1
    fi
    for i in $(seq 0 ${l}); do
      let ii="i+5"
      # echo "- $i $ii : ${R[$i]} ${!ii}"

      # if it is a comparison (in brackets), then run it
      if [ "${!ii:0:1}" == "[" ]; then
#        echo " ... custom test rule '${!ii}'"
        local result=${R[$i]}
        local RR=`eval ${!ii}` ; RRe=$?
        EXPECTED+=( "${!ii}" )
#        echo "RR '${RR}' '${RRe}' : '${3}' '${4}'"
        if [ ${RRe} -eq ${3} ]; then
          let "_tr_results[4]++"
        else
          E+=( "F CHECK'${!ii}' returns '${RRe}' not '${3}'" )
          let "_tr_results[3]++"
        fi
      else
        EXPECTED+=( "${!ii}" )
#        echo "R ${R[@]} $i"
        if [ "${R[$i]}" != "${!ii}" ]; then
          E+=( "F CHECK: '${R[$i]}' is not '${!ii}'" )
          let "_tr_results[3]++"
          retval=1
        else
          let "_tr_results[4]++"
          #      echo "  PASSED"
        fi
      fi
    done


    #  for r in "${R[@]}"
    #  do
    #    echo 
    #    if [ "${R}" != "${3}" ] || [ "${Re}" -ne ${4} ]; then
    #      echo "FAILED : '${TEST}' : ${1} : '${R}' '${Re}'"
    #      let "_tr_results[0]++"
    #    fi
    #  done



    if [ $retval -eq 1 ]; then
      #    RR="${R[@]}"
      #    printf "  FAILED '${Re}' '${RR}' is not '${3}' '"
      #    let "_tr_results[0]++"
      #    for i in $(seq 1 ${#R[@]}); do
      #      let ii="i+4"
      #      printf "${!ii}"
      #    done
      #    printf "'\n"
      printf "  EXPECT : %s\n" "${EXPECTED[@]}"
      printf "  OUTPUT : '%s\n" "${R[@]}"
      #printf "  OUTPUT1: '%s\n" "${R[@]}" | fold -w ${_tr_fold4} -s | gsed -e '2,$s/^/           \x27/'
#      printf "    %s\n" "${E[@]}" | fold -w ${_tr_fold4} -s | gsed -e '2,$s/^/             \x27/'
      printf "  %s\n" "${E[@]}" | fold -w ${_tr_fold4} -s
      echo "  FAILED"
      let "_tr_results[0]++"
    else
      if [ ${_tr_output} -ge 2 ]; then
        printf "  EXPECT : %s\n" "${EXPECTED[@]}"
        printf "  OUTPUT : '%s\n" "${R_[@]}" | fold -w ${_tr_fold4} -s | gsed -e '2,$s/^/           \x27/'
      fi
      echo "  PASSED"
      let "_tr_results[1]++"
    fi

    if [ ${retval} -ne 0 ] && [ ${_tr_exit_on_fail} == 1 ]; then tr_results; exit 1; fi
    return $retval
  }

  function tr_test_skip()
  {
    echo ""
    echo "SKIP T : '${1}'"
    let "_tr_results[2]++"
  }

  function tr_doctest
  {
    _tr_doctest="$*"
  }

  tr_results()
  {
    let totaltests="_tr_results[0]+_tr_results[1]+_tr_results[2]"
    let totalchecks="_tr_results[3]+_tr_results[4]"
    echo ""
    echo "RESULTS"
    echo "---------------------------------------------------------------------"
    echo "  Failed  : ${_tr_results[0]}  (${_tr_results[3]} checks)"
    echo "  Passed  : ${_tr_results[1]}  (${_tr_results[4]} checks)"
    echo "  Skipped : ${_tr_results[2]}"
    echo "  Totals  : ${totaltests}  ($totalchecks checks)"
  }


  # Initialize it all
  tr_init
fi
